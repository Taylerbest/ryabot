// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://fqgcctsvozcoezpfytck.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZxZ2NjdHN2b3pjb2V6cGZ5dGNrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwNTY0MjQsImV4cCI6MjA3NDYzMjQyNH0.rxutBSydzYJX1fBx-PfaPwtCM_K3gdQ1X20GYNNUwPQ';
const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

class IslandMap {
    constructor() {
        this.plots = [];
        this.canvas = document.getElementById('islandCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.currentZoom = 1;
        this.targetZoom = 1;
        this.showGrid = true;
        this.hoverInfo = document.getElementById('hoverInfo');
        this.currentCoords = document.getElementById('currentCoords');
        this.imageCache = new Map();
        this.colors = {
            unopened: '#CCCCCC',
            opened: '#4A90E2',
            sold: '#50E3C2',
            custom: '#ff6b6b'
        };

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑—É–º–∞
        this.zoomSpeed = 0.25;
        this.minZoom = 0.3;
        this.maxZoom = 8;
        this.isZooming = false;
        this.zoomAnimationId = null;

        // Touch/Pinch –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.touches = [];
        this.lastPinchDistance = 0;
        this.isPinching = false;
        this.initialPinchZoom = 1;
        this.pinchCenter = { x: 0, y: 0 };

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        this.isDragging = false;
        this.dragStartX = 0;
        this.dragStartY = 0;
        this.dragStartScrollLeft = 0;
        this.dragStartScrollTop = 0;
        this.lastTouchTime = 0;
        this.touchStartTime = 0;
        this.hasMoved = false; // –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞ vs –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–ø-–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        this.isMovingToTarget = false;
        this.moveAnimationId = null;

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        this.container = null;

        this.baseSize = 2000;
        this.cellSize = 20;
        
        this.setupCanvas();
        this.init();
    }

    setupCanvas() {
        this.canvas.width = this.baseSize;
        this.canvas.height = this.baseSize;
        this.canvas.style.width = (this.baseSize / 2) + 'px';
        this.canvas.style.height = (this.baseSize / 2) + 'px';
        this.ctx.imageSmoothingEnabled = false;
        this.ctx.webkitImageSmoothingEnabled = false;
        this.ctx.mozImageSmoothingEnabled = false;

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        this.container = this.canvas.parentElement;
    }

    async init() {
        await this.loadPlots();
        this.setupEventListeners();
        this.render();
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!');
    }

    async loadPlots() {
        console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...');
        try {
            const { data, error } = await supabase
                .from('plots')
                .select('id, coord_x, coord_y, status, price, owner_name, image_url')
                .limit(10000);

            if (error) throw error;
            this.plots = data || [];

            if (this.plots.length < 10000) {
                this.generateMissingPlots();
            }

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.plots.length} —É—á–∞—Å—Ç–∫–æ–≤`);
            const plotsWithImages = this.plots.filter(plot => plot.image_url && plot.image_url.trim() !== '');
            console.log(`üñºÔ∏è –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ ${plotsWithImages.length} —É—á–∞—Å—Ç–∫–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏`);
            
            if (plotsWithImages.length === 0) {
                console.log('üé® –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏...');
                this.addTestImagesToPlots();
            } else {
                this.preloadImages();
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ:', error);
            this.generateAllPlotsLocally();
        }
    }

    async preloadImages() {
        const imageUrls = this.plots
            .filter(plot => plot.image_url && plot.image_url.trim() !== '')
            .map(plot => plot.image_url)
            .filter((url, index, self) => self.indexOf(url) === index);
        
        console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º ${imageUrls.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫`);
        const loadPromises = imageUrls.map(url => this.loadImageToCache(url));
        await Promise.allSettled(loadPromises);
        console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        this.render();
    }

    async loadImageToCache(url) {
        return new Promise((resolve) => {
            if (!url || url.trim() === '') {
                resolve(null);
                return;
            }

            if (this.imageCache.has(url)) {
                resolve(this.imageCache.get(url));
                return;
            }

            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º: ${url}`);
            const img = new Image();
            img.crossOrigin = "anonymous";
            
            img.onload = () => {
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞: ${url} (${img.width}x${img.height})`);
                this.imageCache.set(url, img);
                resolve(img);
            };
            
            img.onerror = () => {
                console.warn(`‚ùå –û—à–∏–±–∫–∞: ${url}`);
                const stub = this.createImageStub();
                this.imageCache.set(url, stub);
                resolve(stub);
            };
            
            img.src = url;
        });
    }

    createImageStub() {
        const canvas = document.createElement('canvas');
        canvas.width = 100;
        canvas.height = 100;
        const ctx = canvas.getContext('2d');
        
        ctx.fillStyle = '#ff6b6b';
        ctx.fillRect(0, 0, 100, 100);
        ctx.fillStyle = 'white';
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('IMG', 50, 50);
        
        const img = new Image();
        img.src = canvas.toDataURL();
        return img;
    }

    addTestImagesToPlots() {
        const testImages = [
            'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=400&fit=crop',
            'https://images.unsplash.com/photo-1439066615861-d1af74d74000?w=400&h=400&fit=crop',
            'https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=400&fit=crop',
            'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=400&h=400&fit=crop',
            'https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?w=400&h=400&fit=crop',
            'https://images.unsplash.com/photo-1501854140801-50d01698950b?w=400&h=400&fit=crop'
        ];

        console.log('üé® –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –≤—Å–µ–π –∫–∞—Ä—Ç–µ...');
        const imagesPerRow = 10;
        const imagesPerCol = 10;
        const stepX = Math.floor(100 / imagesPerRow);
        const stepY = Math.floor(100 / imagesPerCol);
        let imageIndex = 0;

        for (let gridX = 0; gridX < imagesPerRow; gridX++) {
            for (let gridY = 0; gridY < imagesPerCol; gridY++) {
                const x = gridX * stepX + Math.floor(Math.random() * stepX);
                const y = gridY * stepY + Math.floor(Math.random() * stepY);
                const plotIndex = y * 100 + x;

                if (plotIndex < this.plots.length) {
                    const randomImage = testImages[imageIndex % testImages.length];
                    this.plots[plotIndex].image_url = randomImage;
                    this.plots[plotIndex].status = 'custom';
                    imageIndex++;
                }
            }
        }

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${imageIndex} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫–∞—Ä—Ç–µ`);
        this.preloadImages();
    }

    generateAllPlotsLocally() {
        this.plots = [];
        for (let x = 0; x < 100; x++) {
            for (let y = 0; y < 100; y++) {
                const status = Math.random() < 0.8 ? 'unopened' : 
                             Math.random() < 0.95 ? 'opened' : 'sold';
                
                this.plots.push({
                    id: x * 100 + y + 1,
                    coord_x: x,
                    coord_y: y,
                    status: status,
                    price: Math.round(100 + Math.random() * 400),
                    owner_name: status === 'sold' ? '–ò–≥—Ä–æ–∫' : null,
                    image_url: null
                });
            }
        }
        this.addTestImagesToPlots();
    }

    setupEventListeners() {
        // –ö–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑—É–º–∞
        this.canvas.addEventListener('wheel', (e) => this.handleWheelZoom(e), { passive: false });
        
        // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: false });
        this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
        this.canvas.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: false });

        // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        this.canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));
        this.canvas.addEventListener('mouseleave', () => this.handleMouseLeave());

        // –ö–ª–∏–∫–∏ –ø–æ —É—á–∞—Å—Ç–∫–∞–º
        this.canvas.addEventListener('click', (e) => this.handleCanvasClick(e));

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        document.getElementById('showGrid').addEventListener('click', () => this.toggleGrid());

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelector('.close').addEventListener('click', () => this.closeModal());
        document.getElementById('closeModal').addEventListener('click', () => this.closeModal());
        document.getElementById('buyPlot').addEventListener('click', () => this.buyPlot());
        document.getElementById('setImage').addEventListener('click', () => this.setCustomImage());
    }

    // –ó—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
    handleWheelZoom(e) {
        e.preventDefault();
        
        const rect = this.canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        
        const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
        const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.currentZoom * zoomFactor));
        
        this.setZoomInstantly(newZoom, mouseX, mouseY);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑—É–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    setZoomInstantly(newZoom, centerX, centerY) {
        const oldZoom = this.currentZoom;
        const scrollLeft = this.container.scrollLeft;
        const scrollTop = this.container.scrollTop;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É –≤ "–º–∏—Ä–æ–≤—ã—Ö" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∫–∞–Ω–≤–∞—Å–∞
        const worldX = (centerX + scrollLeft) / oldZoom;
        const worldY = (centerY + scrollTop) / oldZoom;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∑—É–º
        this.currentZoom = newZoom;
        this.targetZoom = newZoom;
        this.applyZoom();
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º/–ø–∞–ª—å—Ü–µ–º
        const newScrollLeft = worldX * newZoom - centerX;
        const newScrollTop = worldY * newZoom - centerY;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–∞–Ω–≤–∞—Å–∞
        const maxScrollLeft = this.canvas.offsetWidth - this.container.clientWidth;
        const maxScrollTop = this.canvas.offsetHeight - this.container.clientHeight;
        
        this.container.scrollLeft = Math.max(0, Math.min(maxScrollLeft, newScrollLeft));
        this.container.scrollTop = Math.max(0, Math.min(maxScrollTop, newScrollTop));
    }

    // Touch —Å–æ–±—ã—Ç–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã pinch-to-zoom
    handleTouchStart(e) {
        e.preventDefault();
        this.touches = Array.from(e.touches);
        this.touchStartTime = Date.now();
        this.hasMoved = false;
        
        if (this.isMovingToTarget) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è
            cancelAnimationFrame(this.moveAnimationId);
            this.isMovingToTarget = false;
        }
        
        if (this.touches.length === 1) {
            // –û–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            this.isDragging = true;
            this.dragStartX = this.touches[0].clientX;
            this.dragStartY = this.touches[0].clientY;
            this.dragStartScrollLeft = this.container.scrollLeft;
            this.dragStartScrollTop = this.container.scrollTop;
        } else if (this.touches.length === 2) {
            // –î–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º pinch
            this.isPinching = true;
            this.isDragging = false;
            this.lastPinchDistance = this.getPinchDistance();
            this.initialPinchZoom = this.currentZoom;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä pinch –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∫–∞–Ω–≤–∞—Å–∞
            const rect = this.canvas.getBoundingClientRect();
            this.pinchCenter = {
                x: (this.touches[0].clientX + this.touches[1].clientX) / 2 - rect.left,
                y: (this.touches[0].clientY + this.touches[1].clientY) / 2 - rect.top
            };
        }
    }

    handleTouchMove(e) {
        e.preventDefault();
        this.touches = Array.from(e.touches);
        this.hasMoved = true;
        
        if (this.isPinching && this.touches.length === 2) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pinch-to-zoom —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            const currentDistance = this.getPinchDistance();
            const scale = currentDistance / this.lastPinchDistance;
            
            if (Math.abs(scale - 1) > 0.01) {
                const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.currentZoom * scale));
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä pinch
                this.setZoomInstantly(newZoom, this.pinchCenter.x, this.pinchCenter.y);
                
                this.lastPinchDistance = currentDistance;
            }
        } else if (this.isDragging && this.touches.length === 1) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–∏–º –ø–∞–ª—å—Ü–µ–º
            const deltaX = this.touches[0].clientX - this.dragStartX;
            const deltaY = this.touches[0].clientY - this.dragStartY;
            
            this.container.scrollLeft = this.dragStartScrollLeft - deltaX;
            this.container.scrollTop = this.dragStartScrollTop - deltaY;
        }
    }

    handleTouchEnd(e) {
        const touchDuration = Date.now() - this.touchStartTime;
        const remainingTouches = Array.from(e.touches);
        
        if (remainingTouches.length < 2) {
            this.isPinching = false;
            this.lastPinchDistance = 0;
        }
        
        if (remainingTouches.length === 0) {
            // –ï—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –±–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - —ç—Ç–æ —Ç–∞–ø
            if (touchDuration < 300 && !this.hasMoved) {
                const touch = e.changedTouches[0];
                this.handleTapNavigation(touch);
            }
            
            this.isDragging = false;
            this.hasMoved = false;
        }
        
        this.touches = remainingTouches;
    }

    // –¢–ê–ü-–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï: –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ
    handleTapNavigation(touch) {
        const now = Date.now();
        const timeSinceLastTap = now - this.lastTouchTime;
        
        if (timeSinceLastTap < 300) {
            // –î–≤–æ–π–Ω–æ–π —Ç–∞–ø - –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ —Ç–æ—á–∫–µ
            const rect = this.canvas.getBoundingClientRect();
            const tapX = touch.clientX - rect.left;
            const tapY = touch.clientY - rect.top;
            
            this.smoothMoveToPoint(tapX, tapY);
        } else {
            // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–∞–ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —É—á–∞—Å—Ç–∫—É
            const rect = this.canvas.getBoundingClientRect();
            const x = touch.clientX - rect.left;
            const y = touch.clientY - rect.top;
            
            setTimeout(() => {
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥–≤–æ–π–Ω–æ–º—É —Ç–∞–ø—É
                if (Date.now() - this.lastTouchTime > 250) {
                    this.processClick(x, y);
                }
            }, 250);
        }
        
        this.lastTouchTime = now;
    }

    // –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Ç–æ—á–∫–µ
    smoothMoveToPoint(targetX, targetY) {
        const containerRect = this.container.getBoundingClientRect();
        const centerX = containerRect.width / 2;
        const centerY = containerRect.height / 2;
        
        const currentScrollLeft = this.container.scrollLeft;
        const currentScrollTop = this.container.scrollTop;
        
        const targetScrollLeft = currentScrollLeft + (targetX - centerX);
        const targetScrollTop = currentScrollTop + (targetY - centerY);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        const maxScrollLeft = this.canvas.offsetWidth - this.container.clientWidth;
        const maxScrollTop = this.canvas.offsetHeight - this.container.clientHeight;
        
        const finalScrollLeft = Math.max(0, Math.min(maxScrollLeft, targetScrollLeft));
        const finalScrollTop = Math.max(0, Math.min(maxScrollTop, targetScrollTop));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.animateMoveTo(currentScrollLeft, currentScrollTop, finalScrollLeft, finalScrollTop);
    }

    animateMoveTo(startLeft, startTop, endLeft, endTop) {
        if (this.isMovingToTarget) {
            cancelAnimationFrame(this.moveAnimationId);
        }
        
        this.isMovingToTarget = true;
        const startTime = Date.now();
        const duration = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // Easing function –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easeProgress = 1 - Math.pow(1 - progress, 3);
            
            const currentLeft = startLeft + (endLeft - startLeft) * easeProgress;
            const currentTop = startTop + (endTop - startTop) * easeProgress;
            
            this.container.scrollLeft = currentLeft;
            this.container.scrollTop = currentTop;
            
            if (progress < 1) {
                this.moveAnimationId = requestAnimationFrame(animate);
            } else {
                this.isMovingToTarget = false;
            }
        };
        
        animate();
    }

    getPinchDistance() {
        if (this.touches.length < 2) return 0;
        
        const dx = this.touches[0].clientX - this.touches[1].clientX;
        const dy = this.touches[0].clientY - this.touches[1].clientY;
        return Math.sqrt(dx * dx + dy * dy);
    }

    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ + —Ç–∞–ø-–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    handleMouseDown(e) {
        if (e.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            this.isDragging = true;
            this.dragStartX = e.clientX;
            this.dragStartY = e.clientY;
            this.dragStartScrollLeft = this.container.scrollLeft;
            this.dragStartScrollTop = this.container.scrollTop;
            this.canvas.style.cursor = 'grabbing';
            this.hasMoved = false;
        }
    }

    handleMouseMove(e) {
        if (this.isDragging) {
            const deltaX = e.clientX - this.dragStartX;
            const deltaY = e.clientY - this.dragStartY;
            
            if (Math.abs(deltaX) > 3 || Math.abs(deltaY) > 3) {
                this.hasMoved = true;
            }
            
            this.container.scrollLeft = this.dragStartScrollLeft - deltaX;
            this.container.scrollTop = this.dragStartScrollTop - deltaY;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            this.updateHoverInfo(e);
        }
    }

    handleMouseUp(e) {
        if (this.isDragging) {
            // –ï—Å–ª–∏ –º—ã—à–∫–∞ –Ω–µ –¥–≤–∏–≥–∞–ª–∞—Å—å - —ç—Ç–æ –∫–ª–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∫–∞–∫ –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø)
            if (!this.hasMoved) {
                const rect = this.canvas.getBoundingClientRect();
                const clickX = e.clientX - rect.left;
                const clickY = e.clientY - rect.top;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                const now = Date.now();
                const timeSinceLastClick = now - (this.lastClickTime || 0);
                
                if (timeSinceLastClick < 300) {
                    // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    this.smoothMoveToPoint(clickX, clickY);
                }
                
                this.lastClickTime = now;
            }
            
            this.isDragging = false;
            this.hasMoved = false;
            this.canvas.style.cursor = 'grab';
        }
    }

    handleMouseLeave() {
        this.isDragging = false;
        this.hasMoved = false;
        this.canvas.style.cursor = 'grab';
        this.hideHoverInfo();
    }

    updateHoverInfo(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const coords = this.getPlotCoordinates(x, y);
        if (coords) {
            this.currentCoords.textContent = `X:${coords.x}, Y:${coords.y}`;
            const plot = this.findPlotByCoords(coords.x, coords.y);
            if (plot) {
                this.showHoverInfo(e.clientX, e.clientY, plot);
            }
        } else {
            this.hideHoverInfo();
        }
    }

    applyZoom() {
        this.canvas.style.transform = `scale(${this.currentZoom})`;
        document.getElementById('zoomLevel').textContent = `${Math.round(this.currentZoom * 100)}%`;
        this.render();
    }

    handleCanvasClick(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.isDragging || this.hasMoved || this.isMovingToTarget) return;
        
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        this.processClick(x, y);
    }

    processClick(x, y) {
        const coords = this.getPlotCoordinates(x, y);
        if (coords && coords.x >= 0 && coords.x < 100 && coords.y >= 0 && coords.y < 100) {
            const plot = this.findPlotByCoords(coords.x, coords.y);
            if (plot) {
                this.showPlotDetails(plot);
            }
        }
    }

    getPlotCoordinates(canvasX, canvasY) {
        const scale = this.currentZoom;
        const detail = this.getRenderDetailLevel();
        
        let effectiveCellSize;
        switch(detail) {
            case 'ultra': effectiveCellSize = this.cellSize * 6; break;
            case 'high': effectiveCellSize = this.cellSize * 3; break;
            case 'medium': effectiveCellSize = this.cellSize * 1.5; break;
            default: effectiveCellSize = this.cellSize;
        }

        const scrollLeft = this.container.scrollLeft;
        const scrollTop = this.container.scrollTop;
        
        const x = Math.floor((canvasX + scrollLeft) / (effectiveCellSize * scale));
        const y = Math.floor((canvasY + scrollTop) / (effectiveCellSize * scale));

        return { x, y };
    }

    render() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.imageSmoothingEnabled = false;
        
        const detail = this.getRenderDetailLevel();
        
        this.plots.forEach(plot => {
            this.renderPlot(plot, detail);
        });
        
        if (this.showGrid && detail !== 'ultra') {
            this.renderGrid(detail);
        }
    }

    getRenderDetailLevel() {
        if (this.currentZoom >= 2.5) return 'ultra';
        if (this.currentZoom >= 1.2) return 'high';
        if (this.currentZoom >= 0.7) return 'medium';
        return 'low';
    }

    renderPlot(plot, detail) {
        const baseX = plot.coord_x * this.cellSize;
        const baseY = plot.coord_y * this.cellSize;
        let renderSize, renderX, renderY;

        switch(detail) {
            case 'ultra':
                renderSize = this.cellSize * 6;
                renderX = baseX * 6;
                renderY = baseY * 6;
                break;
            case 'high':
                renderSize = this.cellSize * 3;
                renderX = baseX * 3;
                renderY = baseY * 3;
                break;
            case 'medium':
                renderSize = this.cellSize * 1.5;
                renderX = baseX * 1.5;
                renderY = baseY * 1.5;
                break;
            default:
                renderSize = this.cellSize;
                renderX = baseX;
                renderY = baseY;
        }

        const hasImage = plot.image_url && plot.image_url.trim() !== '';
        const imageLoaded = hasImage && this.imageCache.has(plot.image_url);

        if (imageLoaded && detail !== 'low') {
            const img = this.imageCache.get(plot.image_url);
            this.ctx.drawImage(img, renderX, renderY, renderSize, renderSize);
            this.ctx.strokeStyle = 'rgba(255,255,255,0.3)';
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(renderX, renderY, renderSize, renderSize);
        } else {
            this.ctx.fillStyle = this.colors[plot.status] || this.colors.unopened;
            this.ctx.fillRect(renderX, renderY, renderSize, renderSize);
            
            if (hasImage && detail !== 'low') {
                this.renderCameraIcon(renderX, renderY, renderSize);
            }
        }
    }

    renderCameraIcon(x, y, size) {
        const iconSize = Math.max(10, size / 5);
        this.ctx.fillStyle = 'rgba(0,0,0,0.7)';
        this.ctx.fillRect(x + size - iconSize - 3, y + 3, iconSize, iconSize - 4);
        this.ctx.fillStyle = 'rgba(255,255,255,0.9)';
        this.ctx.beginPath();
        this.ctx.arc(x + size - iconSize/2 - 3, y + 3 + iconSize/2, iconSize/4, 0, Math.PI * 2);
        this.ctx.fill();
        this.ctx.fillStyle = 'gold';
        this.ctx.fillRect(x + size - iconSize + 2, y + 2, 3, 2);
    }

    renderGrid(detail) {
        this.ctx.strokeStyle = 'rgba(0,0,0,0.15)';
        this.ctx.lineWidth = 0.5;
        
        let cellSize, totalSize;
        switch(detail) {
            case 'high':
                cellSize = this.cellSize * 3;
                totalSize = this.baseSize * 3;
                break;
            case 'medium':
                cellSize = this.cellSize * 1.5;
                totalSize = this.baseSize * 1.5;
                break;
            default:
                cellSize = this.cellSize;
                totalSize = this.baseSize;
        }

        for (let i = 0; i <= 100; i++) {
            this.ctx.beginPath();
            this.ctx.moveTo(i * cellSize, 0);
            this.ctx.lineTo(i * cellSize, totalSize);
            this.ctx.stroke();

            this.ctx.beginPath();
            this.ctx.moveTo(0, i * cellSize);
            this.ctx.lineTo(totalSize, i * cellSize);
            this.ctx.stroke();
        }
    }

    showHoverInfo(x, y, plot) {
        this.hoverInfo.style.left = (x + 15) + 'px';
        this.hoverInfo.style.top = (y + 15) + 'px';
        this.hoverInfo.classList.add('show');
        
        const statusText = this.getStatusText(plot.status);
        const hasImage = plot.image_url ? '‚úì –ï—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞' : '‚úó –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏';
        
        this.hoverInfo.innerHTML = `
            <strong>–£—á–∞—Å—Ç–æ–∫ ${plot.id}</strong><br>
            –°—Ç–∞—Ç—É—Å: ${statusText}<br>
            –¶–µ–Ω–∞: ${plot.price} –º–æ–Ω–µ—Ç<br>
            ${hasImage}
        `;
    }

    hideHoverInfo() {
        this.hoverInfo.classList.remove('show');
    }

    findPlotByCoords(x, y) {
        return this.plots.find(plot => plot.coord_x === x && plot.coord_y === y);
    }

    toggleGrid() {
        this.showGrid = !this.showGrid;
        const btn = document.getElementById('showGrid');
        btn.textContent = this.showGrid ? 'üìã –°–µ—Ç–∫–∞' : '‚¨ú –ë–µ–∑ —Å–µ—Ç–∫–∏';
        btn.classList.toggle('active', !this.showGrid);
        this.render();
    }

    showPlotDetails(plot) {
        document.getElementById('plotId').textContent = plot.id;
        document.getElementById('plotX').textContent = plot.coord_x;
        document.getElementById('plotY').textContent = plot.coord_y;
        document.getElementById('plotPrice').textContent = plot.price;
        document.getElementById('plotOwner').textContent = plot.owner_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
        
        const statusElement = document.getElementById('plotStatus');
        statusElement.textContent = this.getStatusText(plot.status);
        statusElement.dataset.status = plot.status;
        
        const imageContainer = document.getElementById('plotImageContainer');
        if (plot.image_url) {
            imageContainer.innerHTML = `<img src="${plot.image_url}" alt="–£—á–∞—Å—Ç–æ–∫ ${plot.id}" style="max-width: 100%; border-radius: 8px;">`;
        } else {
            imageContainer.innerHTML = '<p style="color: #666; font-style: italic;">–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</p>';
        }
        
        const buyButton = document.getElementById('buyPlot');
        if (plot.status === 'sold') {
            buyButton.textContent = '–£–∂–µ –ø—Ä–æ–¥–∞–Ω–æ';
            buyButton.disabled = true;
        } else {
            buyButton.textContent = `–ö—É–ø–∏—Ç—å –∑–∞ ${plot.price} –º–æ–Ω–µ—Ç`;
            buyButton.disabled = false;
        }
        
        this.currentPlot = plot;
        document.getElementById('plotModal').style.display = 'block';
    }

    getStatusText(status) {
        const statusMap = {
            'unopened': '–ù–µ–æ—Ç–∫—Ä—ã—Ç–æ',
            'opened': '–û—Ç–∫—Ä—ã—Ç–æ',
            'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
            'custom': '–ö–∞—Å—Ç–æ–º'
        };
        return statusMap[status] || status;
    }

    closeModal() {
        document.getElementById('plotModal').style.display = 'none';
        this.currentPlot = null;
    }

    async buyPlot() {
        if (!this.currentPlot) return;

        try {
            this.currentPlot.status = 'sold';
            this.currentPlot.owner_name = '–ò–≥—Ä–æ–∫';
            this.render();
            this.closeModal();

            const { error } = await supabase
                .from('plots')
                .update({
                    status: 'sold',
                    owner_name: '–ò–≥—Ä–æ–∫',
                    purchase_date: new Date().toISOString().split('T')[0]
                })
                .eq('id', this.currentPlot.id);

            if (!error) {
                alert(`üéâ –£—á–∞—Å—Ç–æ–∫ ${this.currentPlot.id} –∫—É–ø–ª–µ–Ω!`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
        }
    }

    async setCustomImage() {
        if (!this.currentPlot) return;

        const imageUrl = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 400x400px –∏–ª–∏ –±–æ–ª—å—à–µ):', 
            'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=400&fit=crop');

        if (imageUrl) {
            try {
                await this.loadImageToCache(imageUrl);
                this.currentPlot.image_url = imageUrl;
                this.currentPlot.status = 'custom';
                this.render();
                this.closeModal();
                alert('üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.');
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('DOMContentLoaded', () => {
    console.log('üå¥ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—É –æ—Å—Ç—Ä–æ–≤–∞...');
    window.islandMap = new IslandMap();
});
